name: Test and publish

on: push

jobs:
  test_and_publish:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: 11
          distribution: adopt

      - name: Install LZO
        run: sudo apt-get install -y lzop liblzo2-dev

      - name: Run tests
        run: sbt coverage test

      - name: Check formatting
        run: sbt scalafmtCheck

      - name: Login to Docker Hub
        if: startsWith(github.ref, 'refs/tags/')
        run: docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

      - name: Publish to Docker Hub
        if: startsWith(github.ref, 'refs/tags/')
        run: sbt 'project main' docker:publish

      - name: Publish to Docker Hub lzo
        if: startsWith(github.ref, 'refs/tags/')
        run: sbt 'project lzo' docker:publish

      - name: Build artifacts
        run: |
          sbt assembly
      - name: Get current version
        id: ver
        run: |
          export PROJECT_VERSION=$(sbt version -Dsbt.log.noformat=true | perl -ne 'print "$1\n" if /info.*(\d+\.\d+\.\d+[^\r\n]*)/' | tail -n 1 | tr -d '\n')
          echo "::set-output name=project_version::$PROJECT_VERSION"
      - name: Create GitHub release and attach artifacts
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          prerelease: true
          name: Version ${{ steps.ver.outputs.project_version }}
          tag_name: ${{ steps.ver.outputs.project_version }}
          files: |
            modules/main/target/scala-2.13/snowplow-s3-loader-${{ steps.ver.outputs.project_version }}.jar
            modules/lzo/target/scala-2.13/snowplow-s3-loader-lzo-${{ steps.ver.outputs.project_version }}.jar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Submit coveralls data
        run: |
          sbt coverageAggregate
          sbt coveralls
        env:
          COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
